{"mappings":"AAMA,SAAAA,gBAAAC,EAAAC,G,wWAAA,IAAAC,eAoCC,W,sBApCKA,EACQC,G,IAAEC,EAAFD,EAAEC,SAAUC,EAAZF,EAAYE,W,wBACtBC,KAAKC,QAAUC,SAASC,cAAcL,GACtCE,KAAKD,WAAaA,EAElBC,KAAKI,Y,yBAGPC,IAAA,a,MAAA,W,WACEC,aAAY,WACVC,EAAKC,O,GACJ,I,IAGLH,IAAA,M,MACA,SAAII,GACF,OAAOC,OAAOD,GAAOE,SAAS,EAAG,I,IAGnCN,IAAA,Q,MAAA,WACE,IAAIO,EAAY,IAAIC,KAChBC,EAAOC,KAAKC,MAAMhB,KAAKD,WAAaa,GACpCK,EAAOjB,KAAKkB,IAAIH,KAAKC,MAAMF,EAAQ,QACnCK,EAAQnB,KAAKkB,IACfH,KAAKC,MAAMF,EAAS,MAAyB,OAE3CM,EAAOpB,KAAKkB,IAAIH,KAAKC,MAAMF,EAAS,KAAoB,MACxDO,EAAOrB,KAAKkB,IAAIH,KAAKC,MAAMF,EAAS,IAAc,MAEtDd,KAAKC,QAAQE,cAAc,uBAAuBmB,YAAcL,EAChEjB,KAAKC,QAAQE,cAAc,wBAAwBmB,YAAcH,EACjEnB,KAAKC,QAAQE,cAAc,uBAAuBmB,YAAcF,EAChEpB,KAAKC,QAAQE,cAAc,uBAAuBmB,YAAcD,C,OAInE,GAAD,IAAIzB,eAAe,CACjBE,SAAU,WACVC,WAAY,IAAIc,KAAK,2BAEvB,IAAMU,OAAS,IAAI3B,eAAe,CAChCE,SAAU,WACVC,WAAY,IAAIc,KAAK","sources":["src/index.js"],"sourcesContent":["// Создай плагин настраиваемого таймера, который ведет обратный отсчет до предварительно определенной даты.\r\n// Такой плагин может использоваться в блогах и интернет - магазинах, страницах регистрации событий, во время технического обслуживания и т.д.\r\n// Плагин ожидает следующую HTML - разметку и показывает четыре цифры: дни, часы, минуты и секунды в формате XX: XX: XX: XX.\r\n//  Количество дней может состоять из более чем двух цифр.\r\n\r\n// Плагин это класс CountdownTimer, экземпляр которого создает новый таймер с настройками.\r\nclass CountdownTimer {\r\n  constructor({ selector, targetDate }) {\r\n    this.element = document.querySelector(selector);\r\n    this.targetDate = targetDate;\r\n\r\n    this.startWatch();\r\n  }\r\n\r\n  startWatch() {\r\n    setInterval(() => {\r\n      this.timer();\r\n    }, 1000);\r\n  }\r\n\r\n  /* Принимает число, приводит к строке и добавляет 0, если число меньше 2-х знаков*/\r\n  pad(value) {\r\n    return String(value).padStart(2, '0');\r\n  }\r\n\r\n  timer() {\r\n    let startDate = new Date();\r\n    let time = Math.floor(this.targetDate - startDate);\r\n    let days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n    let hours = this.pad(\r\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\r\n    );\r\n    let mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n    let secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\r\n\r\n    this.element.querySelector('[data-value=\"days\"]').textContent = days;\r\n    this.element.querySelector('[data-value=\"hours\"]').textContent = hours;\r\n    this.element.querySelector('[data-value=\"mins\"]').textContent = mins;\r\n    this.element.querySelector('[data-value=\"secs\"]').textContent = secs;\r\n  }\r\n}\r\n\r\nnew CountdownTimer({\r\n  selector: '#timer-1',\r\n  targetDate: new Date('Feb 16, 2024 00:00:00'),\r\n});\r\nconst timer2 = new CountdownTimer({\r\n  selector: '#timer-2',\r\n  targetDate: new Date('Aug 23, 2023 00:00:00'),\r\n});\r\n\r\n/*Для подсчета значений используй следующие готовые формулы, где time - разница между targetDate и текущей датой.\r\n\r\n * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\r\n * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\r\n */\r\n// const days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n\r\n/*\r\n * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\r\n * остатка % и делим его на количество миллисекунд в одном часе\r\n * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\r\n */\r\n// const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n\r\n/*\r\n * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\r\n * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\r\n */\r\n// const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\r\n\r\n/*\r\n * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\r\n * миллисекунд в одной секунде (1000)\r\n */\r\n// const secs = Math.floor((time % (1000 * 60)) / 1000);\r\n"],"names":["_classCallCheck","instance","Constructor","CountdownTimer","param","selector","targetDate","this","element","document","querySelector","startWatch","key","setInterval","_this","timer","value","String","padStart","startDate","Date","time","Math","floor","days","pad","hours","mins","secs","textContent","timer2"],"version":3,"file":"index.4b4f3132.js.map"}